@page "/DataGrid"
@inject HttpClient Http

<h1>Data Grid</h1>

<p>This component demonstrates fetching data.</p>

@if (DataSource == null) {
    <div>Loading...</div>
} else {
    <DxDataGrid Data="@DataSource">
        <DxDataGridDateEditColumn Field=@nameof(WeatherForecast.Date) />
        <DxDataGridColumn Field=@nameof(WeatherForecast.TemperatureC) Caption="Temp. (C)" />
        <DxDataGridSpinEditColumn Field=@nameof(WeatherForecast.TemperatureF) Caption="Temp. (F)" />
    </DxDataGrid>
}

<h1>Grades</h1>

<p>This component demonstrates my grades</p>

@if (Enrolmentss == null) {
    <div>Loading...</div>
} else {
    <DxDataGrid Data="@Enrolmentss">
        <DxDataGridColumn Field=@nameof(Enrolment.course) Caption="Temp. (C)" />
    </DxDataGrid> 
}

@code {
    private IEnumerable<WeatherForecast> DataSource;
    private Enrolment[] Enrolments;
    private IEnumerable<Enrolment> Enrolmentss;

    public class WeatherForecast {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    protected override async Task OnInitializedAsync() {
        DataSource = await GetForecastAsync();
        Enrolmentss = await Http.GetFromJsonAsync<IEnumerable<Enrolment>>("sample-data/grades.json");
        Enrolments = await Http.GetFromJsonAsync<Enrolment[]>("sample-data/Grades.json");
    }

    public Task<IEnumerable<WeatherForecast>> GetForecastAsync() {
        var rng = new Random();
        DateTime startDate = DateTime.Now;
        return Task.FromResult(Enumerable.Range(1, 15).Select(index => new WeatherForecast {
            Date = startDate.AddDays(index),
            TemperatureC = rng.Next(-15, 20),
        }).AsEnumerable());
    }

    public class Enrolment {
        public int id { get; set; }
        public String course { get; set; }
    }
}